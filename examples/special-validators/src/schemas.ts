/**
 * Mock generated Zod schemas
 * 
 * In a real application, these schemas would be automatically generated by
 * the type-compiler. For this example, we're manually creating them to
 * demonstrate how the special field validators would be applied.
 */
import { z } from 'zod';

// User schema with special validators applied
export const zUser = z.object({
  uuid: z.string().uuid(),
  username: z.string().toLowerCase().trim().min(3),
  email: z.string().email(),
  password: z.string().min(8).regex(/[A-Z]/).regex(/[a-z]/).regex(/[0-9]/).regex(/[^A-Za-z0-9]/),
  birthDate: z.string().pipe(z.coerce.date()),
  age: z.number().int().min(0).max(120),
  profileUrl: z.string().url(),
  phoneNumber: z.string().regex(/^\+?[1-9]\d{1,14}$/),
  createdAt: z.date()
});

// Location schema with special validators for coordinates
export const zLocation = z.object({
  name: z.string(),
  latitude: z.number().min(-90).max(90),
  longitude: z.number().min(-180).max(180),
  address: z.string(),
  zipCode: z.string()
});

// Server schema with IP and URL validators
export const zServer = z.object({
  hostname: z.string(),
  ipAddress: z.string().ip(),
  url: z.string().url(),
  port: z.number().int().min(1).max(65535),
  lastChecked: z.date()
});

// Contact schema with email and phone validators
export const zContact = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().email(),
  phoneNumber: z.string().regex(/^\+?[1-9]\d{1,14}$/),
  address: z.string()
});

// Order schema with validators
export const zOrder = z.object({
  uuid: z.string().uuid(),
  userId: z.string(),
  items: z.array(z.lazy(() => zOrderItem)),
  total: z.number().min(0),
  billingEmail: z.string().email(),
  shippingAddress: z.string(),
  createdAt: z.date()
});

// OrderItem schema
export const zOrderItem = z.object({
  productId: z.string(),
  name: z.string(),
  quantity: z.number().int().min(1),
  price: z.number().min(0)
});

// Product schema
export const zProduct = z.object({
  uuid: z.string().uuid(),
  name: z.string(),
  description: z.string(),
  price: z.number().min(0),
  imageUrl: z.string().url(),
  weight: z.number().min(0)
});

// Website configuration schema
export const zWebsiteConfig = z.object({
  name: z.string(),
  url: z.string().url(),
  adminEmail: z.string().email(),
  maxUploadSize: z.number().min(0),
  allowedDomains: z.array(z.string())
});

// Login credentials schema
export const zLoginCredentials = z.object({
  email: z.string().email(),
  password: z.string().min(8).regex(/[A-Z]/).regex(/[a-z]/).regex(/[0-9]/).regex(/[^A-Za-z0-9]/)
});

// Password reset schema
export const zPasswordReset = z.object({
  email: z.string().email(),
  newPassword: z.string().min(8).regex(/[A-Z]/).regex(/[a-z]/).regex(/[0-9]/).regex(/[^A-Za-z0-9]/),
  confirmPassword: z.string()
}).refine(data => data.newPassword === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"]
});

// Geographic point schema
export const zGeoPoint = z.object({
  latitude: z.number().min(-90).max(90),
  longitude: z.number().min(-180).max(180),
  elevation: z.number().optional()
}); 
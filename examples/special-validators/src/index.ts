/**
 * Example code demonstrating the use of special field validators
 */
import { z } from 'zod';
import {
  User,
  Location,
  Server,
  Contact,
  Order,
  OrderItem,
  Product,
  WebsiteConfig,
  LoginCredentials,
  PasswordReset,
  GeoPoint
} from './types';

// Import the automatically generated Zod schemas
// In a real application, these would be generated by the type-compiler
// For this example, we're importing them as if they were generated
import {
  zUser,
  zLocation,
  zServer,
  zContact,
  zOrder,
  zOrderItem,
  zProduct,
  zWebsiteConfig,
  zLoginCredentials,
  zPasswordReset,
  zGeoPoint
} from './schemas';

// Example data
const validUser: User = {
  uuid: '123e4567-e89b-12d3-a456-426614174000',
  username: 'johndoe',
  email: 'john.doe@example.com',
  password: 'P@ssw0rd!',
  birthDate: '1990-01-01',
  age: 33,
  profileUrl: 'https://example.com/users/johndoe',
  phoneNumber: '+12125551234',
  createdAt: new Date()
};

const invalidUser = {
  uuid: 'not-a-uuid',
  username: 'a',  // too short
  email: 'not-an-email',
  password: 'weak',  // fails complexity requirements
  birthDate: 'yesterday',  // invalid date format
  age: 200,  // outside the allowed range
  profileUrl: 'not-a-url',
  phoneNumber: '123',  // invalid phone number format
  createdAt: 'now'  // not a Date
};

const validLocation: Location = {
  name: 'Central Park',
  latitude: 40.7812,
  longitude: -73.9665,
  address: '59th to 110th St., New York, NY',
  zipCode: '10022'
};

const validGeoPoint: GeoPoint = {
  latitude: 40.7812,
  longitude: -73.9665,
  elevation: 100
};

// Function to validate data and print results
function validateAndPrint(schema: z.ZodType<any>, data: any, label: string): void {
  console.log(`\n--- Validating ${label} ---`);
  try {
    const validated = schema.parse(data);
    console.log('✅ Valid data:', JSON.stringify(validated, null, 2));
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log('❌ Validation errors:');
      error.errors.forEach(err => {
        console.log(`- ${err.path.join('.')}: ${err.message}`);
      });
    } else {
      console.error('Unexpected error:', error);
    }
  }
}

// Main function to demonstrate the validation
function main() {
  console.log('=== Special Field Validators Example ===');
  console.log('This example demonstrates how the type-compiler uses special field validators\n');
  
  // Validate valid user
  validateAndPrint(zUser, validUser, 'Valid User');
  
  // Validate invalid user
  validateAndPrint(zUser, invalidUser, 'Invalid User');
  
  // Validate location with latitude/longitude
  validateAndPrint(zLocation, validLocation, 'Valid Location');
  
  // Validate GeoPoint - should use the same validators for latitude/longitude
  validateAndPrint(zGeoPoint, validGeoPoint, 'Valid GeoPoint');
  
  // Demonstrate multiple interfaces with the same special field
  const contact: Contact = {
    firstName: 'Jane',
    lastName: 'Smith',
    email: 'jane.smith@example.com',
    phoneNumber: '+12125551234',
    address: '123 Main St, New York, NY'
  };
  
  validateAndPrint(zContact, contact, 'Contact with email and phone');
  
  // Login credentials with email and password
  const credentials: LoginCredentials = {
    email: 'user@example.com',
    password: 'SecureP@ss123!'
  };
  
  validateAndPrint(zLoginCredentials, credentials, 'Login Credentials');
  
  // Demonstrate more complex validation chains
  const server: Server = {
    hostname: 'api-server',
    ipAddress: '192.168.1.1',
    url: 'https://api.example.com',
    port: 443,
    lastChecked: new Date()
  };
  
  validateAndPrint(zServer, server, 'Server');
  
  console.log('\n=== Validation Complete ===');
}

// Run the main function
main(); 
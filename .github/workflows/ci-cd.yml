name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (required for manual trigger)'
        required: true
        default: 'Bug fixes and improvements'
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
        
      - name: Run tests
        run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Clean dist directory
        run: npm run clean
        
      - name: Run bootstrap
        run: npm run bootstrap
        
      - name: Verify build
        run: npm pack --dry-run
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 1

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build
    # Only run this job on the main branch and not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      
      # Get PR information when triggered by a merge to main
      - name: Get PR Title
        id: pr_info
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Get the commit message of the merge commit
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          echo "Commit message: $COMMIT_MSG"
          
          # Extract PR number and title if it's a PR merge commit
          if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ \#([0-9]+)\ from\ .*\ \((.*)\) ]]; then
            PR_NUMBER=${BASH_REMATCH[1]}
            PR_TITLE=${BASH_REMATCH[2]}
            echo "Found PR #$PR_NUMBER: $PR_TITLE"
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
            PR_NUMBER=${BASH_REMATCH[1]}
            # Try to get PR title from GitHub API
            PR_TITLE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | \
                          jq -r .title)
            echo "Found PR #$PR_NUMBER: $PR_TITLE"
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          else
            echo "Not a PR merge commit or cannot extract PR title"
            echo "pr_title=Bug fixes and improvements" >> $GITHUB_OUTPUT
          fi
          
      - name: Check current version
        id: check_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Current package version: $PACKAGE_VERSION"
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version is already published to npm
          if npm view type-compiler@$PACKAGE_VERSION version &> /dev/null; then
            echo "Version $PACKAGE_VERSION is already published to npm"
            echo "needs_bump=true" >> $GITHUB_OUTPUT
          else
            if git tag -l | grep -q "v$PACKAGE_VERSION"; then
              echo "Version $PACKAGE_VERSION exists as a git tag but is not on npm"
              echo "needs_bump=false" >> $GITHUB_OUTPUT
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "Version $PACKAGE_VERSION is new"
              echo "needs_bump=false" >> $GITHUB_OUTPUT
              echo "should_publish=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: bump_version
        if: steps.check_version.outputs.needs_bump == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Determine the bump type
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          if [ -z "$BUMP_TYPE" ]; then
            BUMP_TYPE="patch"
          fi
          echo "Bumping version ($BUMP_TYPE)..."
          
          # Get release notes based on source event
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use manually provided release notes
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          else
            # Use PR title from previous step
            RELEASE_NOTES="${{ steps.pr_info.outputs.pr_title }}"
            # If PR title wasn't found, use a default message
            if [ -z "$RELEASE_NOTES" ]; then
              RELEASE_NOTES="Bug fixes and improvements"
            fi
          fi
          echo "Release notes: $RELEASE_NOTES"
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          
          # Use npm version to update package.json without creating a tag yet
          # The -m option is skipped to avoid creating the tag
          npm --no-git-tag-version version $BUMP_TYPE
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Stage and commit the version change
          git add package.json package-lock.json
          git commit -m "Bump version to $NEW_VERSION: $RELEASE_NOTES"
          
          # Create a tag with the release notes
          git tag -a "v$NEW_VERSION" -m "v$NEW_VERSION: $RELEASE_NOTES"
          
          # Update CHANGELOG.md with new version header if it doesn't exist
          if ! grep -q "## \[$NEW_VERSION\]" CHANGELOG.md; then
            DATE=$(date +%Y-%m-%d)
            sed -i "s/# Changelog/# Changelog\n\n## [$NEW_VERSION] - $DATE\n### Changed\n- $RELEASE_NOTES/" CHANGELOG.md
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG.md for v$NEW_VERSION"
          fi
          
          # Push the tag and changes
          git push && git push --tags
          echo "should_publish=true" >> $GITHUB_OUTPUT

      - name: Publish to npm
        if: (steps.check_version.outputs.should_publish == 'true' && !steps.bump_version.outputs.new_version) || steps.bump_version.outputs.should_publish == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        if: steps.bump_version.outputs.new_version
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          body: |
            ## v${{ steps.bump_version.outputs.new_version }}
            
            ${{ steps.bump_version.outputs.release_notes }}
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for more details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 